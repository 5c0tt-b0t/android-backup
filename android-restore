#!/bin/bash
#
# Riyad Preukschas <riyad@informatik.uni-bremen.de>
#
# Restores previously backed-up files to your Android phone.
# You still need to restore your apps and config by running TitaniumBackup.


# log everything using syslog
exec 2>&1 | logger


# for easy listing of directory contents starting with '.'
GLOBIGNORE=.:..
readonly REMOTE_TEMP_DIR="/data/local/tmp"  # you can't chmod +x files in /sdcard
readonly REMOTE_RSYNC_CONFIG="${REMOTE_TEMP_DIR}/rsync.conf"
readonly REMOTE_RSYNC_PORT=1873  # > 1024 so we don't need to be root
readonly LOCAL_RSYNC_PORT=6010
         REMOTE_RSYNC_BIN="rsync"
readonly REMOTE_TEMP_RSYNC_BIN="${REMOTE_TEMP_DIR}/rsync"
readonly USER_RSYNC_FILTER_FILE="$HOME/.android_backup/rsync_restore.filter"
readonly LOCAL_RSYNC_FILTER_FILE=`mktemp -t "$(basename $0).XXXXXXXXXX"`
# on a running Android /sdcard is symlinked to /storage/emulated/[legacy|0]
# but in TWRP it's directly mounted to /sdcard (so the other dirs aren't there)
readonly ANDROID_DEFAULT_STORAGE="/sdcard"
         REMOTE_STORAGES=("${ANDROID_DEFAULT_STORAGE}")
# these are relative to BACKUP_DIR
readonly TB_APKS="TitaniumBackup.apk TitaniumBackupPro.apk"
# these are relative to BACKUP_DIR/STORAGE_NAME
readonly TB_DIR="TitaniumBackup"
readonly PRIO_DIRS="WhatsApp DCIM Pictures"
readonly SKIP_DIRS="${TB_DIR} ${TB_APKS} ${PRIO_DIRS}"


alias adb="adb -d"
adb_install() {
  adb install "$1"
}
adb_push() {
  adb push -p "$1" "$2"
}
rsync_cleanup() {
  adb shell killall "${REMOTE_RSYNC_BIN}"
  adb forward --remove tcp:${LOCAL_RSYNC_PORT}
  adb shell rm -f "${REMOTE_RSYNC_CONFIG}"
  if [[ -f "${REMOTE_TEMP_RSYNC_BIN}" ]]; then
    echo "Cleaning up temporary rsync"
    adb shell rm -f "${REMOTE_TEMP_RSYNC_BIN}"
  fi
  [[ -e "${LOCAL_RSYNC_FILTER_FILE}" ]] && rm "${LOCAL_RSYNC_FILTER_FILE}"
}
rsync_push() {
  # needs extra --temp-dir option against 'mkstemp "..." (in root) failed: Operation not permitted (1)' errors
  # needs extra --no-times option against 'failed to set times on "..." (in root): Operation not permitted (1)' errors
  rsync --partial --progress --archive --human-readable --delete \
    --filter=". ${LOCAL_RSYNC_FILTER_FILE}" --temp-dir="${REMOTE_TEMP_DIR}" \
    "$1" "rsync://localhost:${LOCAL_RSYNC_PORT}/root/$2"
  : rc $?
}
rsync_setup() {
  if [[ -z "$(adb shell which \"${REMOTE_RSYNC_BIN}\")" ]]; then
    echo "Device doesn't have rsync."
    # try different locations for backup rsync
    local script_dir
    script_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
    for rsync_src_dir in "${script_dir}" "/usr/local/lib/android-backup"; do
      local rsync_src="${rsync_src_dir}/rsync.bkp"
      [[ -e "${rsync_src}" ]] && break
    done
    # have we found a backup rsync?
    if [[ -e "${rsync_src}" ]]; then
      echo "Providing temporary rsync from ${rsync_src} ..."
      adb_push "${rsync_src}" "${REMOTE_TEMP_RSYNC_BIN}"
      adb shell chmod 755 "${REMOTE_TEMP_RSYNC_BIN}"
      REMOTE_RSYNC_BIN="${REMOTE_TEMP_RSYNC_BIN}"
    else
      echo "Can't provide temprorary rsync."
      exit 1
    fi
  fi
  # setup rsync daemon on the device
  # from http://blog.josefsson.org/2015/11/28/automatic-android-replicant-backup-over-usb-using-rsync/
  # and http://ptspts.blogspot.de/2015/03/how-to-use-rsync-over-adb-on-android.html
  adb shell "echo \"address = 127.0.0.1\nport = ${REMOTE_RSYNC_PORT}\n\n[root]\npath = /\nuid = root\ngid = sdcard_rw\nread only = false\"" \> "${REMOTE_RSYNC_CONFIG}"
  touch "${LOCAL_RSYNC_FILTER_FILE}"
  adb shell "${REMOTE_RSYNC_BIN} --daemon --no-detach --config=\"${REMOTE_RSYNC_CONFIG}\" &"  # for debugging --log-file=/proc/self/fd/2
  # forward a local port to the rsync daemon on the device
  adb forward tcp:${LOCAL_RSYNC_PORT} tcp:${REMOTE_RSYNC_PORT}
  sleep 2
}
rsync_setup_local_filter_file() {
  cat <<-EOT >> "${LOCAL_RSYNC_FILTER_FILE}"
# ignore known cache files
H .DS_Store
# don't sync custom files
H /TitaniumBackup.apk
H /TitaniumBackupPro.apk
# preserve standard Andoid directories
# P Alarms/
# P Android/
# P DCIM/
# P Download/
# P Movies/
# P Music/
# P Notifications/
# P Pictures/
# P Podcasts/
# P Ringtones/
# P storage/
EOT

  # include user-defined rules
  if [[ -e "${USER_RSYNC_FILTER_FILE}" ]]; then
    echo "merge ${USER_RSYNC_FILTER_FILE}" >> "${LOCAL_RSYNC_FILTER_FILE}"
  fi
}


find_remote_storages() {
  local android_storage_base="/storage"
  local storage_candidates
  storage_candidates=$(adb shell ls "${android_storage_base}")

  for storage_name in ${storage_candidates}
  do
    # assume emulated/0 is covered by /sdcard and everything else isn't relevant
    [[ "${storage_name}" = 'emulated' ]] && continue
    [[ "${storage_name}" = 'self' ]] && continue

    REMOTE_STORAGES+=("${android_storage_base}/${storage_name}")
  done
}


parse_command_line_args() {
  while [[ $# -gt 1 ]]
  do
    case "$1" in
      --debug)
        readonly OPT_DEBUG=1
        ;;
      -r|--use-root)
        readonly OPT_ROOT=1
        ;;
      *)
        echo "Error: unknown argument \"$1\""
        usage
        exit 1
      ;;
    esac
    shift
  done

  # make sure we get a path to restore stuff from
  if [[ -z "$1" ]]; then
    echo "Please specify the directory your backups are in!"
    exit 1
  else
    readonly BACKUP_DIR="$1"
  fi
}

usage() {
  echo "Usage: $0 [OPTIONS] <BACKUP_DIR>"
  echo "       Backup data from storages on the device to <BACKUP_DIR>."
  echo "       NOTE: this requires adb and rsync."
  echo ""
  echo "OPTIONS"
  echo "       --debug  Enable debug mode"
  echo " -r,--use-root  Use adb with root permissions"
}


main() {
  parse_command_line_args "$@"

  if [[ ${OPT_DEBUG} ]]; then
    echo "OPT_DEBUG=${OPT_DEBUG}"
    echo "OPT_ROOT=${OPT_ROOT}"
    echo "BACKUP_DIR=${BACKUP_DIR}"
  fi

  if [[ ! -d "${BACKUP_DIR}" ]]; then
    echo "'${BACKUP_DIR}' is not a directory."
    exit 1
  fi

  if [[ ${OPT_ROOT} ]]; then
    adb root
  fi
  adb wait-for-device

  # will add entries to REMOTE_STORAGES
  find_remote_storages

  # TODO check if there are local directories that have no remote storage equivalent

  rsync_setup
  rsync_setup_local_filter_file

  echo "Restoring TitaniumBackup data first ..."
  local found_tb_dir=0
  for remote_storage in "${REMOTE_STORAGES[@]}"
  do
    local storage_name
    storage_name=$(basename "${remote_storage}")
    local possible_tb_dir="${storage_name}/${TB_DIR}"
    [[ ! -d "${BACKUP_DIR}/${possible_tb_dir}" ]] && continue
    found_tb_dir=1
    rsync_push "${BACKUP_DIR}/${possible_tb_dir}/" "${remote_storage}/${TB_DIR}/"
  done
  if [ ${found_tb_dir} = 0 ]; then
    echo "Can't find TitaniumBackup data directory"
    exit 1
  fi
  echo "... Done!"

  # install TitaniumBackup so we can start restoring stuff on the device itself
  echo "Restoring TitaniumBackup apps ..."
  for apk in ${TB_APKS}; do
    if [[ -f "${BACKUP_DIR}/${apk}" ]]; then
      adb_install "${BACKUP_DIR}/${apk}"
    else
      echo "Can't find TitaniumBackup app ${apk}."
      exit 1
    fi
  done

  echo "Restoring some other things with priority ..."
  for remote_storage in "${REMOTE_STORAGES[@]}"
  do
    local storage_name
    storage_name=$(basename "${remote_storage}")
    echo "... restoring ${storage_name} ..."
    for dir in ${PRIO_DIRS}; do
      [[ ! -d "${BACKUP_DIR}/${storage_name}/${dir}" ]] && continue
      rsync_push "${BACKUP_DIR}/${storage_name}/${dir}/" "${remote_storage}/${dir}/"
    done
  done
  echo "... Done!"

  echo "Restoring all the rest ..."
  for remote_storage in "${REMOTE_STORAGES[@]}"
  do
    local storage_name
    storage_name=$(basename "${remote_storage}")
    echo "... restoring ${storage_name} ..."
    rsync_push "${BACKUP_DIR}/${storage_name}/" "${remote_storage}/"
  done

  rsync_cleanup

  if [[ ${OPT_ROOT} ]]; then
    adb unroot
  fi

  echo "... Done!"
}


main "$@"
