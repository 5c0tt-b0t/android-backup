#!/bin/bash
#
# Riyad Preukschas <riyad@informatik.uni-bremen.de>
#
# Backs up your Android phone's storage.
# It'll also back up your current TitaniumBackup apps for faster restoration.


# on a running Android /sdcard is symlinked to /storage/emulated/[legacy|0]
# but in TWRP it's directly mounted to /sdcard (so the other dirs aren't there)
readonly ANDROID_STORAGE="/sdcard"
readonly REMOTE_TEMP_DIR="/data/local/tmp"  # you can't chmod +x files in /sdcard
readonly REMOTE_RSYNC_CONFIG="${REMOTE_TEMP_DIR}/rsync.conf"
readonly REMOTE_RSYNC_PORT=1873  # > 1024 so we don't need to be root
readonly LOCAL_RSYNC_PORT=6010
         REMOTE_RSYNC_BIN="rsync"
readonly REMOTE_TEMP_RSYNC_BIN="${REMOTE_TEMP_DIR}/rsync"
readonly LOCAL_RSYNC_FILTER_FILE=`mktemp -t "$(basename $0).XXXXXXXXXX"`

# log everything using syslog
exec 2>&1 | logger

alias adb="adb -d"
adb_package_path() {
  adb shell pm path "$1" | tr -d '\r' | sed "s/^package://"
}
adb_pull_app() {
  if [[ -z "$(adb_package_path \"$1\")" ]]; then
    echo "Can't find app $1"
    return 1
  else
    rsync_pull "$(adb_package_path \"$1\")" "$2"
  fi
}
adb_push() {
  adb push -p "$1" "$2"
}
adb_rm_dir() {
  adb shell "[[ -d \"$1\" ]] && rm -r \"$1\""
}
rsync_cleanup() {
  adb forward --remove tcp:${LOCAL_RSYNC_PORT}
  adb shell rm -f "${REMOTE_RSYNC_CONFIG}"
  if [[ -f "${REMOTE_TEMP_RSYNC_BIN}" ]]; then
    echo "Cleaning up temporary rsync"
    adb shell rm -f "${REMOTE_TEMP_RSYNC_BIN}"
  fi
  [[ -e "${LOCAL_RSYNC_FILTER_FILE}" ]] && rm "${LOCAL_RSYNC_FILTER_FILE}"
}
rsync_pull() {
  rsync --partial --progress --archive --human-readable --delete \
    --filter=". ${LOCAL_RSYNC_FILTER_FILE}" --prune-empty-dirs \
    "rsync://localhost:${LOCAL_RSYNC_PORT}/root/$1" "$2"
  : rc $?
}
rsync_setup() {
  if [[ -z "$(adb shell which \"${REMOTE_RSYNC_BIN}\")" ]]; then
    echo "Device doesn't have rsync."
    # try different locations for backup rsync
    local SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    for rsync_src_dir in "${SCRIPT_DIR}" "/usr/local/lib/android-backup"; do
      local RSYNC_SRC="${rsync_src_dir}/rsync.bkp"
      [[ -e "${RSYNC_SRC}" ]] && break
    done
    # have we found a backup rsync?
    if [[ -e "${RSYNC_SRC}" ]]; then
      echo "Providing temporary rsync from ${RSYNC_SRC} ..."
      adb_push "${RSYNC_SRC}" "${REMOTE_TEMP_RSYNC_BIN}"
      adb shell chmod 755 "${REMOTE_TEMP_RSYNC_BIN}"
      REMOTE_RSYNC_BIN="${REMOTE_TEMP_RSYNC_BIN}"
    else
      echo "Can't provide temprorary rsync."
      exit 1
    fi
  fi
  # setup rsync daemon on the device
  # from http://blog.josefsson.org/2015/11/28/automatic-android-replicant-backup-over-usb-using-rsync/
  # and http://ptspts.blogspot.de/2015/03/how-to-use-rsync-over-adb-on-android.html
  adb shell "echo \"address = 127.0.0.1\nport = ${REMOTE_RSYNC_PORT}\n\n[root]\npath = /\ngid = sdcard_rw\nread only = true\"" \> "${REMOTE_RSYNC_CONFIG}"
  touch "${LOCAL_RSYNC_FILTER_FILE}"
  adb shell "${REMOTE_RSYNC_BIN} --daemon --no-detach --config=\"${REMOTE_RSYNC_CONFIG}\" &"  # for debugging --log-file=/proc/self/fd/2
  # forward a local port to the rsync daemon on the device
  adb forward tcp:${LOCAL_RSYNC_PORT} tcp:${REMOTE_RSYNC_PORT}
  sleep 2
}


# make sure we get a path to backup stuff into
if [[ -z "$1" ]]; then
  backup_dir_name="./bkp `date '+%Y-%m-%dT%H-%M'`"
  echo "You haven't specified a backup directory."
  read -p "Use '${backup_dir_name}'? [y/n] " yn
  case $yn in
    [Yy]* ) ;;  # just get through
    [Nn]* ) exit;;
    * ) exit 1;;
  esac
  readonly BACKUP_DIR="${backup_dir_name}"
else
  readonly BACKUP_DIR="$1"
fi


# make sure we don't overwrite anything by accident
if [[ -d "${BACKUP_DIR}" ]]; then
  echo "WARNING: '${BACKUP_DIR}' exists already!"
  read -p "Are you sure you want to overwrite files in there? [Yes/No] " yn
  case $yn in
    'Yes'* ) ;;  # just get through
    'No'* ) exit;;
    * ) exit 1;;
  esac
fi


mkdir -p "${BACKUP_DIR}"


rsync_setup
echo "Backing up user data ..."
# ignore known cache files
echo 'H .DS_Store' >> "${LOCAL_RSYNC_FILTER_FILE}"
# don't let rsync delete these (see below)
echo 'P /TitaniumBackup.apk' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'P /TitaniumBackupPro.apk' >> "${LOCAL_RSYNC_FILTER_FILE}"
# don't sync certain files and directories
echo 'H .cache/' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H .thumbs/' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H .thumbnails/' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H /Android/data/com.android.providers.media/albumthumbs/' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H /Android/data/com.google.android.apps.maps/testdata/' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H /Android/data/org.videolan.vlc/files/thumbs/' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H /Android/data/*/cache' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H /Applidium Image Cache/' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H /CameraZOOM/.packs/' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H /CameraZOOM/.temp/' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H /osmand/*.obf' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H /osmand/fonts/' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H /osmand/tiles/**/*.tile' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H /osmand/travel/*.sqlite' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H /osmand/voice/' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H /quran_android/audio/' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H /WhatsApp/Media/.Statuses/' >> "${LOCAL_RSYNC_FILTER_FILE}"
# don't sync large directories that can easily be restored
echo 'H /Music/' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H /Movies/' >> "${LOCAL_RSYNC_FILTER_FILE}"
echo 'H /Podcasts/' >> "${LOCAL_RSYNC_FILTER_FILE}"
# start the backup
rsync_pull "${ANDROID_STORAGE}/" "${BACKUP_DIR}/"
# backup TitaniumBackup app separately
echo "Backing up TitaniumBackup apps ..."
adb_pull_app com.keramidas.TitaniumBackup "${BACKUP_DIR}/TitaniumBackup.apk"
adb_pull_app com.keramidas.TitaniumBackupPro "${BACKUP_DIR}/TitaniumBackupPro.apk"
rsync_cleanup
echo "... Done!"
