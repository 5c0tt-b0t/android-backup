#!/bin/bash
#
# Riyad Preukschas <riyad@informatik.uni-bremen.de>
#
# Backs up your Android phone's storage(s).
# It'll also back up your current TitaniumBackup apps for faster restoration.


readonly REMOTE_TEMP_DIR="/data/local/tmp"  # you can't chmod +x files in /sdcard
readonly REMOTE_RSYNC_CONFIG="${REMOTE_TEMP_DIR}/rsync.conf"
readonly REMOTE_RSYNC_PORT=1873  # > 1024 so we don't need to be root
readonly LOCAL_RSYNC_PORT=6010
         REMOTE_RSYNC_BIN="rsync"
readonly REMOTE_TEMP_RSYNC_BIN="${REMOTE_TEMP_DIR}/rsync"
readonly USER_RSYNC_FILTER_FILE="$HOME/.android_backup/rsync_backup.filter"
readonly LOCAL_RSYNC_FILTER_FILE=`mktemp -t "$(basename $0).XXXXXXXXXX"`
# on a running Android /sdcard is symlinked to /storage/emulated/[legacy|0]
# but in TWRP it's directly mounted to /sdcard (so the other dirs aren't there)
readonly ANDROID_DEFAULT_STORAGE="/sdcard"
         REMOTE_STORAGES=("${ANDROID_DEFAULT_STORAGE}")

# log everything using syslog
exec 2>&1 | logger

alias adb="adb -d"
adb_package_path() {
  adb shell pm path "$1" | tr -d '\r' | sed "s/^package://"
}
adb_pull_app() {
  if [[ -z "$(adb_package_path \"$1\")" ]]; then
    echo "Can't find app $1"
    return 1
  else
    rsync_pull "$(adb_package_path \"$1\")" "$2"
  fi
}
adb_push() {
  adb push -p "$1" "$2"
}
adb_rm_dir() {
  adb shell "[[ -d \"$1\" ]] && rm -r \"$1\""
}
rsync_cleanup() {
  adb shell killall "${REMOTE_RSYNC_BIN}"
  adb forward --remove tcp:${LOCAL_RSYNC_PORT}
  adb shell rm -f "${REMOTE_RSYNC_CONFIG}"
  if [[ -f "${REMOTE_TEMP_RSYNC_BIN}" ]]; then
    echo "Cleaning up temporary rsync"
    adb shell rm -f "${REMOTE_TEMP_RSYNC_BIN}"
  fi
  [[ -e "${LOCAL_RSYNC_FILTER_FILE}" ]] && rm "${LOCAL_RSYNC_FILTER_FILE}"
}
rsync_pull() {
  rsync --partial --progress --archive --human-readable --delete \
    --filter=". ${LOCAL_RSYNC_FILTER_FILE}" --prune-empty-dirs \
    "rsync://localhost:${LOCAL_RSYNC_PORT}/root/$1" "$2"
  : rc $?
}
rsync_setup() {
  if [[ -z "$(adb shell which \"${REMOTE_RSYNC_BIN}\")" ]]; then
    echo "Device doesn't have rsync."
    # try different locations for backup rsync
    local SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    for rsync_src_dir in "${SCRIPT_DIR}" "/usr/local/lib/android-backup"; do
      local RSYNC_SRC="${rsync_src_dir}/rsync.bkp"
      [[ -e "${RSYNC_SRC}" ]] && break
    done
    # have we found a backup rsync?
    if [[ -e "${RSYNC_SRC}" ]]; then
      echo "Providing temporary rsync from ${RSYNC_SRC} ..."
      adb_push "${RSYNC_SRC}" "${REMOTE_TEMP_RSYNC_BIN}"
      adb shell chmod 755 "${REMOTE_TEMP_RSYNC_BIN}"
      REMOTE_RSYNC_BIN="${REMOTE_TEMP_RSYNC_BIN}"
    else
      echo "Can't provide temprorary rsync."
      exit 1
    fi
  fi
  # setup rsync daemon on the device
  # from http://blog.josefsson.org/2015/11/28/automatic-android-replicant-backup-over-usb-using-rsync/
  # and http://ptspts.blogspot.de/2015/03/how-to-use-rsync-over-adb-on-android.html
  adb shell "echo \"address = 127.0.0.1\nport = ${REMOTE_RSYNC_PORT}\n\n[root]\npath = /\nuse chroot = false\nread only = true\"" \> "${REMOTE_RSYNC_CONFIG}"
  touch "${LOCAL_RSYNC_FILTER_FILE}"
  adb shell "${REMOTE_RSYNC_BIN} --daemon --no-detach --config=\"${REMOTE_RSYNC_CONFIG}\" &"  # for debugging --log-file=/proc/self/fd/2
  # forward a local port to the rsync daemon on the device
  adb forward tcp:${LOCAL_RSYNC_PORT} tcp:${REMOTE_RSYNC_PORT}
  sleep 2
}
rsync_setup_local_filter_file() {
  cat <<-EOT >> "${LOCAL_RSYNC_FILTER_FILE}"
# don't let rsync delete these
P /TitaniumBackup.apk
P /TitaniumBackupPro.apk
# don't sync common cache files and directories
H .cache/
H .thumbs/
H .thumbnails/
H /Android/data/com.android.providers.media/albumthumbs/
H /Android/data/com.google.android.apps.maps/testdata/
H /Android/data/org.videolan.vlc/files/thumbs/
H /Android/data/*/cache
H /Applidium Image Cache/
EOT

  # include user-defined rules
  if [[ -e "${USER_RSYNC_FILTER_FILE}" ]]; then
    echo "merge ${USER_RSYNC_FILTER_FILE}" >> "${LOCAL_RSYNC_FILTER_FILE}"
  fi
}


find_remote_storages() {
  local android_storage_base="/storage"
  local storage_candidates="$(adb shell ls "${android_storage_base}")"

  for storage_name in ${storage_candidates}
  do
    # assume emulated/0 is covered by /sdcard and everything else isn't relevant
    [[ "${storage_name}" = 'emulated' ]] && continue
    [[ "${storage_name}" = 'self' ]] && continue

    REMOTE_STORAGES+=("${android_storage_base}/${storage_name}")
  done
}


parse_command_line_args() {
  while [[ $# -gt 1 ]]
  do
    case "$1" in
      --debug)
        readonly OPT_DEBUG=1
        ;;
      -r|--use-root)
        readonly OPT_ROOT=1
        ;;
      *)
        echo "Error: unknown argument \"$1\""
        usage
        exit 1
      ;;
    esac
    shift
  done

  # make sure we get a path to backup stuff into
  if [[ -z "$1" ]]; then
    echo "Please specify the directory your backups should go into!"
    exit 1
  else
    readonly BACKUP_DIR="$1"
  fi
}

usage() {
  echo "Usage: $0 [OPTIONS] <BACKUP_DIR>"
  echo "       Backup data from storages on the device to <BACKUP_DIR>."
  echo "       NOTE: this requires adb and rsync."
  echo ""
  echo "OPTIONS"
  echo "       --debug  Enable debug mode"
  echo " -r,--use-root  Use adb with root permissions"
}


main() {
  parse_command_line_args $@

  if [[ ${OPT_DEBUG} ]]; then
    echo "OPT_DEBUG=${OPT_DEBUG}"
    echo "OPT_ROOT=${OPT_ROOT}"
    echo "BACKUP_DIR=${BACKUP_DIR}"
  fi

  # make sure we don't overwrite anything by accident
  if [[ -d "${BACKUP_DIR}" ]]; then
    echo "WARNING: '${BACKUP_DIR}' exists already!"
    read -p "Are you sure you want to overwrite files in there? [Yes/No] " yn
    case $yn in
      'Yes'* ) ;;  # just get through
      'No'* ) exit;;
      * ) exit 1;;
    esac
  fi

  mkdir -p "${BACKUP_DIR}"

  if [[ ${OPT_ROOT} ]]; then
    adb root
  fi
  adb wait-for-device

  # will add entries to REMOTE_STORAGES
  find_remote_storages

  rsync_setup
  rsync_setup_local_filter_file

  echo "Backing up user data ..."
  # start the backup
  for remote_storage in ${REMOTE_STORAGES[@]}
  do
    local storage_name="$(basename "${remote_storage}")"
    echo "... backing up ${storage_name} ..."
    rsync_pull "${remote_storage}/" "${BACKUP_DIR}/${storage_name}/"
  done
  echo "... Done!"
  
  # backup TitaniumBackup app separately
  echo "Backing up TitaniumBackup apps ..."
  adb_pull_app com.keramidas.TitaniumBackup "${BACKUP_DIR}/TitaniumBackup.apk"
  adb_pull_app com.keramidas.TitaniumBackupPro "${BACKUP_DIR}/TitaniumBackupPro.apk"
  
  rsync_cleanup
  
  if [[ ${OPT_ROOT} ]]; then
    adb unroot
  fi

  echo "... Done!"
}


main $@
